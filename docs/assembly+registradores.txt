Operações
0000 - NOP
0001 - ???
0010 - ADD  imm7, reg2 (GR[reg2] + imm7 -> GR[reg2])
0011 - ADD  reg1, reg2 (GR[reg2] + GR[reg1] -> GR[reg2])
0100 - SUB  reg1, reg2 (GR[reg2] - GR[reg1] -> GR[reg2])
0101 - SUBR reg1, reg2 (GR[reg1] - GR[reg2] -> GR[reg1])
0110 - MOV  imm7, reg2 (imm7 -> GR[reg2])
0111 - MOV  reg1, reg2 (GR[reg1] -> GR[reg2])
1000 - CMP  imm7, reg2 (GR[reg2] - imm7 -> result)
1001 - CMP  reg1, reg2 (GR[reg2] - GR[reg1] -> result)
1010 - LD.W disp7[reg1], reg2 (1- GR[reg1] + sign-extend(disp7) -> addr/2- loadmem(addr,Word) -> GR[reg2])
1011 - ST.W reg2, disp7[reg1] (1- GR[reg1] + sign-extend(disp7) -> addr/2- storemem(addr,GR[reg2],Word))
1110 - Bcond disp7 (disp7 + PC -> PC se cumprir as condições)
    tipos de Bcond
        BE (Branch if equal): bbb = 000
            verifica se flag zero = 1
        BNE (Branch if not equal): bbb = 001
            verifica se flag zero = 0
        BL (Branch if lower): bbb = 010
            verifica a flag carry = 1
        BNL (Branch if not lower): bbb = 011
            verifica se flag carry = 0
        BN (Branch if negative): bbb = 100
            verifica se flag negativo = 1
        BP (Branch if positive): bbb = 101
            verifica se flag negativo = 0
1111 - JMP  disp7[reg1] (disp7 + GR[reg1] -> PC)*

*a instrução de jump (JMP) não foi implementada do mesmo jeito que está descrito no datasheet do processador,
 contudo a execução dele funciona.

Formatos OPCODE:
1 - Para instruções do tipo ADD/SUB/SUBR/MOV/CMP/LD.W/ST.W

    CCCCIIIIIIIrrrRRR

    C - Operação
    I - Constante
    r - Registrador 1
    R - Registrador 2

2 - Para instruções do tipo Bcond

    1110IIIIIII000bbb

    I - Constante
    b - Condição de Branch

3 - Para instruções do tipo JMP

    1111IIIIIII000000

    I - Constante

4 - Para instrução do tipo NOP

    00000000000000000

Registradores
r6     /r7     /r8     /r9     /r10    /r11    /r12     - Registradores do processador (V850E2S)
r1(001)/r2(010)/r3(011)/r4(100)/r5(101)/r6(110)/r7(111) - Registradores reais do nosso processador

Instruções
0 - MOV 5,  R6 		    -- Armazena 5 em R1
1 - MOV 10, R7          -- Armazena 10 em R2
2 - ST.W 1[R8], R7      -- Armazena o valor de R2 no endereço da RAM relativo a 1 + R3
3 - ST.W 0[R8], R6      -- Armazena o valor de R1 no endereço da RAM relativo a 0 + R3
4 -	LD.W R8, 0[R12]     -- Carrega em R3 o valor no endereço da RAM relativo a 0 + R7
5 -	LD.W R9, 1[R11]     -- Carrega em R4 o valor no endereço da RAM relativo a 1 + R7
6 -	ADD 1, R8	        -- Adiciona 1 com R3 e armazena em R3
7 - ADD R8, R9	        -- Adicona R3 com R4 e armazena em R4
8 -	ST.W 2[R0], R9      -- Armazena o valor de R4 no endereço da RAM relativo a 2 + R0
9 -	ST.W 3[R0], R8      -- Armazena o valor de R3 no endereço da RAM relativo a 3 + R0

Opcodes 
0 - 01100000101000001   -- 0x0C141
1 - 01100001010000010   -- 0x0C282
2 - 10110000001011010   -- 0x1605A
3 - 10110000000011001   -- 0x16019
4 - 10100000000111011   -- 0x1403B
5 - 10100000001111100   -- 0x1407C
6 - 00100000001000011   -- 0x04043
7 - 00110000000011100   -- 0x0601C
8 - 10110000010000100   -- 0x16084
9 - 10110000011000011   -- 0x160C3